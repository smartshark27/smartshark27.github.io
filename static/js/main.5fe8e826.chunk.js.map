{"version":3,"sources":["components/Header.js","components/Graph.js","components/InfoOverlay.js","App.js","serviceWorker.js","index.js"],"names":["containerStyle","position","zIndex","marginTop","marginLeft","homeButtonStyle","color","titleStyle","Header","props","Box","display","style","IconButton","onClick","handleClick","fontWeight","appearance","require","nodeSize","node","skillLevel","renderLabel","ctx","globalScale","fontSize","font","textAlign","textBaseline","fillStyle","bottomDistance","fillText","name","x","y","Graph","ref","fg","graphData","data","onNodeClick","handleNodeClick","onBackgroundClick","handleBackgroundClick","nodeColor","type","nodeVal","nodeCanvasObject","nodeCanvasObjectMode","borderRadius","paddingBottom","InfoOverlay","sn","selectedNode","isNarrowScreen","windowWidth","dynamicStyle","backgroundColor","minHeight","windowHeight","Container","description","technologyNodes","projectNodes","technologyTechnologyLinks","projectTechnologyLinks","allNodes","concat","allLinks","App","state","nodes","links","updateWindowDimensions","bind","updateNodesAndLinks","handleHomeButtonClick","React","createRef","filter","link","source","id","target","reduce","isIn","curr","this","current","centerAt","zoom","setState","window","innerWidth","innerHeight","addEventListener","removeEventListener","width","height","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fe8e826.chunk.js","sourcesContent":["import React from \"react\";\nimport { IconButton, Box } from '@material-ui/core';\nimport HomeIcon from '@material-ui/icons/Home';\n\nconst containerStyle = {\n    position: \"absolute\",\n    zIndex: 101,\n    marginTop: 10,\n    marginLeft: 10,\n}\n\nconst homeButtonStyle = {\n    color: \"black\"\n}\n\nconst titleStyle = {\n    marginLeft: 10,\n    marginTop: 14,\n}\n\nexport default function Header(props) {\n    return (\n        <Box display=\"flex\" style={containerStyle}>\n            <IconButton style={homeButtonStyle} onClick={props.handleClick}>\n                <HomeIcon/>\n            </IconButton>\n            <Box fontWeight=\"fontWeightBold\" style={titleStyle}>smartshark27 (Thomas Smart)</Box>\n        </Box>\n    )\n}","import React from \"react\";\nimport ForceGraph2D from 'react-force-graph-2d';\nconst appearance = require(\"../appearance.json\");\n\nfunction nodeSize(node) {\n    if (node.skillLevel != null)\n        return node.skillLevel\n    else\n        return 3\n}\n\nfunction renderLabel(node, ctx, globalScale) {\n    if (globalScale < 1.5) return;\n    const fontSize = 15 / globalScale;\n    ctx.font = `${fontSize}px \"Exo 2\"`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = 'black';\n    const bottomDistance = nodeSize(node) + 10\n    ctx.fillText(node.name, node.x, node.y + bottomDistance)\n}\n\nexport default function Graph(props) {\n    return (\n        <ForceGraph2D\n            ref={props.fg}\n            graphData={props.data}\n            onNodeClick={props.handleNodeClick}\n            onBackgroundClick={props.handleBackgroundClick}\n            nodeColor={(node) => appearance[node.type].color}\n            nodeVal={nodeSize}\n            nodeCanvasObject={renderLabel}\n            nodeCanvasObjectMode={() => \"after\"}\n        />\n    )\n}","import React from \"react\";\nimport { Container } from '@material-ui/core';\nconst appearance = require(\"../appearance.json\");\n\nconst style = {\n    position: \"absolute\",\n    zIndex: 101, // Render above everything else\n    borderRadius: 16,\n    paddingBottom: 10,\n}\n\nexport default function InfoOverlay(props) {\n    const sn = props.selectedNode\n    if (sn === null) {\n        return null\n    }\n\n    const isNarrowScreen = props.windowWidth <= 400;\n    const dynamicStyle = {\n        backgroundColor: appearance[sn.type].color,\n        minHeight: 1,\n    }\n    if (isNarrowScreen) {\n        dynamicStyle[\"maxWidth\"] = props.windowWidth - 20\n        dynamicStyle[\"minHeight\"] = 1\n        dynamicStyle[\"top\"] = props.windowHeight - 75\n        dynamicStyle[\"left\"] = 10\n        dynamicStyle[\"marginBottom\"] = 10\n    } else {\n        dynamicStyle[\"maxWidth\"] = props.windowWidth / 4\n        dynamicStyle[\"minHeight\"] = 1\n        dynamicStyle[\"maxHeight\"] = props.windowHeight - 40\n        dynamicStyle[\"top\"] = 20\n        dynamicStyle[\"right\"] = 20\n        dynamicStyle[\"overflowY\"] = \"scroll\"\n    }\n\n    return (\n        <Container style={{ ...style, ...dynamicStyle }}>\n            <h2>{sn.name}</h2>\n            <p>{sn.description}</p>\n        </Container>\n    )\n}","import React from \"react\";\nimport Header from \"./components/Header\";\nimport D3Graph from \"./components/Graph\";\nimport InfoOverlay from \"./components/InfoOverlay\";\n\nconst technologyNodes = require(\"./data/technology.json\");\nconst projectNodes = require(\"./data/project.json\");\nconst technologyTechnologyLinks = require(\"./data/technology-technology.json\");\nconst projectTechnologyLinks = require(\"./data/project-technology.json\");\nconst allNodes = technologyNodes.concat(projectNodes);\nconst allLinks = technologyTechnologyLinks.concat(projectTechnologyLinks);\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: 0,\n      windowHeight: 0,\n      data: {\n        nodes: allNodes,\n        links: allLinks\n      },\n      selectedNode: null\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.updateNodesAndLinks = this.updateNodesAndLinks.bind(this);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleHomeButtonClick = this.handleHomeButtonClick.bind(this);\n    this.handleBackgroundClick = this.handleBackgroundClick.bind(this);\n    this.fg = React.createRef()\n  }\n\n  handleNodeClick(selectedNode) {\n    const links = allLinks.filter(link => {\n      return link.source.id === selectedNode.id || link.target.id === selectedNode.id\n    })\n    const nodes = allNodes.filter(node => {\n      return node.id === selectedNode.id || links.reduce((isIn, curr) => {\n        return isIn || node.id === curr.source.id || node.id === curr.target.id;\n      }, false);\n    })\n    this.updateNodesAndLinks(selectedNode, nodes, links);\n    this.fg.current.centerAt(selectedNode.x, selectedNode.y, 1000)\n    this.fg.current.zoom(3, 1000)\n  }\n\n  handleHomeButtonClick() {\n    this.updateNodesAndLinks(null, allNodes, allLinks);\n    this.fg.current.centerAt(0, 0, 1000)\n    this.fg.current.zoom(1, 1000)\n  }\n\n  handleBackgroundClick() {\n    this.updateNodesAndLinks(null, this.state.data.nodes, this.state.data.links)\n  }\n\n  updateNodesAndLinks(selectedNode, nodes, links) {\n    const state = this.state;\n    state.selectedNode = selectedNode;\n    state.data.nodes = nodes;\n    state.data.links = links;\n    this.setState(state);\n  }\n\n  updateWindowDimensions() {\n    const state = this.state;\n    state.windowWidth = window.innerWidth;\n    state.windowHeight = window.innerHeight;\n    this.setState(state);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  render() {\n    return (\n      <div>\n        <Header handleClick={this.handleHomeButtonClick} />\n        <InfoOverlay\n          windowWidth={this.state.windowWidth}\n          windowHeight={this.state.windowHeight}\n          selectedNode={this.state.selectedNode}\n        />\n        <D3Graph\n          fg={this.fg}\n          selectedNode={this.state.selectedNode}\n          data={this.state.data}\n          width={this.state.windowWidth}\n          height={this.state.windowHeight}\n          handleNodeClick={this.handleNodeClick}\n          handleBackgroundClick={this.handleBackgroundClick}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}