{"version":3,"sources":["components/Header.js","components/Graph.js","components/InfoOverlay.js","App.js","serviceWorker.js","index.js"],"names":["containerStyle","position","zIndex","marginTop","marginLeft","homeButtonStyle","color","titleStyle","Header","props","Box","display","style","IconButton","onClick","handleClick","fontWeight","appearance","require","supportsTouch","window","navigator","msMaxTouchPoints","Graph","ref","fg","enableNodeDrag","graphData","data","onNodeClick","handleNodeClick","onBackgroundClick","handleBackgroundClick","nodeColor","node","type","nodeVal","nodeSize","nodeCanvasObject","renderLabel","nodeCanvasObjectMode","skillLevel","ctx","globalScale","fontSize","font","textAlign","textBaseline","fillStyle","bottomDistance","fillText","name","x","y","minHeight","borderRadius","paddingBottom","InfoOverlay","selectedNode","dynamicStyle","windowWidth","windowHeight","backgroundColor","isNarrowScreen","createDynamicStyle","Container","CommonProperties","TypeProperties","toUpperCase","description","ProjectPropertiesDiv","TechnologyProperties","sn","grade","toString","altText","OneLineProperty","displayName","property","year","Link","website","code","Image","image","skillLevelMap","n","href","target","rel","src","alt","width","technologyNodes","projectNodes","technologyTechnologyLinks","projectTechnologyLinks","allNodes","concat","allLinks","App","state","nodes","links","updateWindowDimensions","bind","updateNodesAndLinks","handleHomeButtonClick","React","createRef","filter","link","source","id","reduce","isIn","curr","this","current","centerAt","zoom","setState","innerWidth","innerHeight","addEventListener","removeEventListener","height","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.108497cb.chunk.js","sourcesContent":["import React from \"react\";\nimport { IconButton, Box } from \"@material-ui/core\";\nimport HomeIcon from \"@material-ui/icons/Home\";\n\nconst containerStyle = {\n  position: \"absolute\",\n  zIndex: 101,\n  marginTop: 10,\n  marginLeft: 10,\n};\n\nconst homeButtonStyle = {\n  color: \"black\",\n};\n\nconst titleStyle = {\n  marginLeft: 10,\n  marginTop: 14,\n};\n\nexport default function Header(props) {\n  return (\n    <Box display=\"flex\" style={containerStyle}>\n      <IconButton style={homeButtonStyle} onClick={props.handleClick}>\n        <HomeIcon />\n      </IconButton>\n      <Box fontWeight=\"fontWeightBold\" style={titleStyle}>\n        smartshark27 (Thomas Smart)\n      </Box>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nconst appearance = require(\"../appearance.json\");\n\nvar supportsTouch = \"ontouchstart\" in window || navigator.msMaxTouchPoints;\n\nexport default function Graph(props) {\n  return (\n    <ForceGraph2D\n      ref={props.fg}\n      enableNodeDrag={!supportsTouch}\n      graphData={props.data}\n      onNodeClick={props.handleNodeClick}\n      onBackgroundClick={props.handleBackgroundClick}\n      nodeColor={(node) => appearance[node.type].color}\n      nodeVal={nodeSize}\n      nodeCanvasObject={renderLabel}\n      nodeCanvasObjectMode={() => \"after\"}\n    />\n  );\n}\n\nfunction nodeSize(node) {\n  if (node.skillLevel != null) return node.skillLevel;\n  else return 3;\n}\n\nfunction renderLabel(node, ctx, globalScale) {\n  if (globalScale < 1.5) return;\n  const fontSize = 15 / globalScale;\n  ctx.font = `${fontSize}px \"Exo 2\"`;\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.fillStyle = \"black\";\n  const bottomDistance = nodeSize(node) + 10;\n  ctx.fillText(node.name, node.x, node.y + bottomDistance);\n}\n","import React from \"react\";\nimport { Box, Container } from \"@material-ui/core\";\nconst appearance = require(\"../appearance.json\");\n\nconst style = {\n  position: \"absolute\",\n  zIndex: 101,\n  minHeight: 1,\n  borderRadius: 16,\n  paddingBottom: 10,\n};\n\nexport default function InfoOverlay(props) {\n  if (noNodeSelected(props.selectedNode)) {\n    return null;\n  }\n  const dynamicStyle = createDynamicStyle(\n    props.selectedNode,\n    props.windowWidth,\n    props.windowHeight\n  );\n\n  return (\n    <Container style={dynamicStyle}>\n      <CommonProperties selectedNode={props.selectedNode} />\n      <TypeProperties selectedNode={props.selectedNode} />\n    </Container>\n  );\n}\n\nfunction noNodeSelected(selectedNode) {\n  return selectedNode === null;\n}\n\nfunction createDynamicStyle(selectedNode, windowWidth, windowHeight) {\n  const dynamicStyle = {\n    ...style,\n    backgroundColor: appearance[selectedNode.type].color,\n  };\n  if (isNarrowScreen(windowWidth)) {\n    dynamicStyle[\"maxWidth\"] = windowWidth - 20;\n    dynamicStyle[\"top\"] = windowHeight - 75;\n    dynamicStyle[\"left\"] = 10;\n    dynamicStyle[\"marginBottom\"] = 10;\n  } else {\n    dynamicStyle[\"maxWidth\"] = windowWidth / 4;\n    dynamicStyle[\"maxHeight\"] = windowHeight - 40;\n    dynamicStyle[\"top\"] = 20;\n    dynamicStyle[\"right\"] = 20;\n    dynamicStyle[\"overflowY\"] = \"scroll\";\n  }\n  return dynamicStyle;\n}\n\nfunction isNarrowScreen(windowWidth) {\n  return windowWidth <= 400;\n}\n\nfunction CommonProperties(props) {\n  return (\n    <>\n      <h6>{props.selectedNode.type.toUpperCase()}</h6>\n      <h2>{props.selectedNode.name}</h2>\n      <p>{props.selectedNode.description}</p>\n    </>\n  );\n}\n\nfunction TypeProperties(props) {\n  if (props.selectedNode.type === \"Project\") {\n    return <ProjectPropertiesDiv selectedNode={props.selectedNode} />;\n  } else if (props.selectedNode.type === \"Technology\") {\n    return <TechnologyProperties selectedNode={props.selectedNode} />;\n  } else {\n    return null;\n  }\n}\n\nfunction ProjectPropertiesDiv(props) {\n  const sn = props.selectedNode;\n  const grade = sn.grade ? sn.grade.toString() + \"/100\" : null;\n  const altText = \"Screenshot for \" + sn.name;\n  return (\n    <>\n      <OneLineProperty displayName=\"Year\" property={sn.year} />\n      <OneLineProperty displayName=\"Grade\" property={grade} />\n      <Link displayName=\"Website\" property={sn.website} />\n      <Link displayName=\"Source Code\" property={sn.code} />\n      <Image altText={altText} property={sn.image} />\n    </>\n  );\n}\n\nfunction TechnologyProperties(props) {\n  const sn = props.selectedNode;\n  return (\n    <OneLineProperty\n      displayName=\"Skill Level\"\n      property={skillLevelMap(sn.skillLevel)}\n    />\n  );\n}\n\nfunction skillLevelMap(n) {\n  if (n === 0) {\n    return \"Haven't used\";\n  } else if (n === 1) {\n    return \"Some knowledge\";\n  } else if (n === 2) {\n    return \"Moderate experience\";\n  } else if (n === 3) {\n    return \"Deep understanding\";\n  } else {\n    return \"\";\n  }\n}\n\nfunction OneLineProperty(props) {\n  const displayName = props.displayName;\n  const property = props.property;\n  if (!property) {\n    return null;\n  } else {\n    return <p>{displayName + \": \" + property}</p>;\n  }\n}\n\nfunction Link(props) {\n  const displayName = props.displayName;\n  const property = props.property;\n  if (!property) {\n    return null;\n  } else {\n    return (\n      <>\n        <Box>{displayName + \":\"}</Box>\n        <a href={property} target=\"_blank\" rel=\"noopener noreferrer\">\n          {property}{\" \"}\n        </a>\n        <p />\n      </>\n    );\n  }\n}\n\nfunction Image(props) {\n  const altText = props.altText;\n  const property = props.property;\n  if (!property) {\n    return null;\n  } else {\n    return (\n      <>\n        <a href={property} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={property} alt={altText} width={\"100%\"} />\n        </a>\n        <p />\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport D3Graph from \"./components/Graph\";\nimport InfoOverlay from \"./components/InfoOverlay\";\n\nconst technologyNodes = require(\"./data/technology.json\");\nconst projectNodes = require(\"./data/project.json\");\nconst technologyTechnologyLinks = require(\"./data/technology-technology.json\");\nconst projectTechnologyLinks = require(\"./data/project-technology.json\");\nconst allNodes = technologyNodes.concat(projectNodes);\nconst allLinks = technologyTechnologyLinks.concat(projectTechnologyLinks);\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: 0,\n      windowHeight: 0,\n      data: {\n        nodes: allNodes,\n        links: allLinks,\n      },\n      selectedNode: null,\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.updateNodesAndLinks = this.updateNodesAndLinks.bind(this);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleHomeButtonClick = this.handleHomeButtonClick.bind(this);\n    this.handleBackgroundClick = this.handleBackgroundClick.bind(this);\n    this.fg = React.createRef();\n  }\n\n  handleNodeClick(selectedNode) {\n    const links = allLinks.filter((link) => {\n      return (\n        link.source.id === selectedNode.id || link.target.id === selectedNode.id\n      );\n    });\n    const nodes = allNodes.filter((node) => {\n      return (\n        node.id === selectedNode.id ||\n        links.reduce((isIn, curr) => {\n          return (\n            isIn || node.id === curr.source.id || node.id === curr.target.id\n          );\n        }, false)\n      );\n    });\n    this.updateNodesAndLinks(selectedNode, nodes, links);\n    this.fg.current.centerAt(selectedNode.x, selectedNode.y, 1000);\n    this.fg.current.zoom(3, 1000);\n  }\n\n  handleHomeButtonClick() {\n    this.updateNodesAndLinks(null, allNodes, allLinks);\n    this.fg.current.centerAt(0, 0, 1000);\n    this.fg.current.zoom(1, 1000);\n  }\n\n  handleBackgroundClick() {\n    this.updateNodesAndLinks(\n      null,\n      this.state.data.nodes,\n      this.state.data.links\n    );\n  }\n\n  updateNodesAndLinks(selectedNode, nodes, links) {\n    const state = this.state;\n    state.selectedNode = selectedNode;\n    state.data.nodes = nodes;\n    state.data.links = links;\n    this.setState(state);\n  }\n\n  updateWindowDimensions() {\n    const state = this.state;\n    state.windowWidth = window.innerWidth;\n    state.windowHeight = window.innerHeight;\n    this.setState(state);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  render() {\n    return (\n      <div>\n        <Header handleClick={this.handleHomeButtonClick} />\n        <InfoOverlay\n          windowWidth={this.state.windowWidth}\n          windowHeight={this.state.windowHeight}\n          selectedNode={this.state.selectedNode}\n        />\n        <D3Graph\n          fg={this.fg}\n          selectedNode={this.state.selectedNode}\n          data={this.state.data}\n          width={this.state.windowWidth}\n          height={this.state.windowHeight}\n          handleNodeClick={this.handleNodeClick}\n          handleBackgroundClick={this.handleBackgroundClick}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}