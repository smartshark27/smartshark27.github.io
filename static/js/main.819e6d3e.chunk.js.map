{"version":3,"sources":["components/Header.js","components/Graph.js","components/InfoOverlay.js","App.js","serviceWorker.js","index.js"],"names":["containerStyle","position","zIndex","marginTop","marginLeft","homeButtonStyle","color","titleStyle","Header","props","Box","display","style","IconButton","onClick","handleClick","fontWeight","appearance","require","nodeSize","node","skillLevel","renderLabel","ctx","globalScale","fontSize","font","textAlign","textBaseline","fillStyle","bottomDistance","fillText","name","x","y","Graph","ref","fg","graphData","data","onNodeClick","handleNodeClick","onBackgroundClick","handleBackgroundClick","nodeColor","type","nodeVal","nodeCanvasObject","nodeCanvasObjectMode","minHeight","borderRadius","paddingBottom","InfoOverlay","selectedNode","dynamicStyle","windowWidth","windowHeight","backgroundColor","isNarrowScreen","createDynamicStyle","Container","CommonProperties","TypeProperties","toUpperCase","description","console","log","ProjectPropertiesDiv","TechnologyProperties","sn","grade","toString","altText","OneLineProperty","displayName","property","year","Link","website","code","Image","image","skillLevelMap","n","href","target","rel","src","alt","width","technologyNodes","projectNodes","technologyTechnologyLinks","projectTechnologyLinks","allNodes","concat","allLinks","App","state","nodes","links","updateWindowDimensions","bind","updateNodesAndLinks","handleHomeButtonClick","React","createRef","filter","link","source","id","reduce","isIn","curr","this","current","centerAt","zoom","setState","window","innerWidth","innerHeight","addEventListener","removeEventListener","height","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.819e6d3e.chunk.js","sourcesContent":["import React from \"react\";\nimport { IconButton, Box } from '@material-ui/core';\nimport HomeIcon from '@material-ui/icons/Home';\n\nconst containerStyle = {\n    position: \"absolute\",\n    zIndex: 101,\n    marginTop: 10,\n    marginLeft: 10,\n}\n\nconst homeButtonStyle = {\n    color: \"black\"\n}\n\nconst titleStyle = {\n    marginLeft: 10,\n    marginTop: 14,\n}\n\nexport default function Header(props) {\n    return (\n        <Box display=\"flex\" style={containerStyle}>\n            <IconButton style={homeButtonStyle} onClick={props.handleClick}>\n                <HomeIcon/>\n            </IconButton>\n            <Box fontWeight=\"fontWeightBold\" style={titleStyle}>smartshark27 (Thomas Smart)</Box>\n        </Box>\n    )\n}","import React from \"react\";\nimport ForceGraph2D from 'react-force-graph-2d';\nconst appearance = require(\"../appearance.json\");\n\nfunction nodeSize(node) {\n    if (node.skillLevel != null)\n        return node.skillLevel\n    else\n        return 3\n}\n\nfunction renderLabel(node, ctx, globalScale) {\n    if (globalScale < 1.5) return;\n    const fontSize = 15 / globalScale;\n    ctx.font = `${fontSize}px \"Exo 2\"`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = 'black';\n    const bottomDistance = nodeSize(node) + 10\n    ctx.fillText(node.name, node.x, node.y + bottomDistance)\n}\n\nexport default function Graph(props) {\n    return (\n        <ForceGraph2D\n            ref={props.fg}\n            graphData={props.data}\n            onNodeClick={props.handleNodeClick}\n            onBackgroundClick={props.handleBackgroundClick}\n            nodeColor={(node) => appearance[node.type].color}\n            nodeVal={nodeSize}\n            nodeCanvasObject={renderLabel}\n            nodeCanvasObjectMode={() => \"after\"}\n        />\n    )\n}","import React from \"react\";\nimport { Box, Container } from '@material-ui/core';\nconst appearance = require(\"../appearance.json\");\n\nconst style = {\n    position: \"absolute\",\n    zIndex: 101,\n    minHeight: 1,\n    borderRadius: 16,\n    paddingBottom: 10,\n}\n\nexport default function InfoOverlay(props) {\n    if (noNodeSelected(props.selectedNode)) {\n        return null;\n    }\n    const dynamicStyle = createDynamicStyle(props.selectedNode, props.windowWidth, props.windowHeight);\n\n    return (\n        <Container style={dynamicStyle}>\n            <CommonProperties selectedNode={props.selectedNode} />\n            <TypeProperties selectedNode={props.selectedNode} />\n        </Container>\n    )\n}\n\nfunction noNodeSelected(selectedNode) {\n    return selectedNode === null;\n}\n\nfunction createDynamicStyle(selectedNode, windowWidth, windowHeight) {\n    const dynamicStyle = {\n        ...style,\n        backgroundColor: appearance[selectedNode.type].color,\n    }\n    if (isNarrowScreen(windowWidth)) {\n        dynamicStyle[\"maxWidth\"] = windowWidth - 20;\n        dynamicStyle[\"top\"] = windowHeight - 75;\n        dynamicStyle[\"left\"] = 10;\n        dynamicStyle[\"marginBottom\"] = 10;\n    } else {\n        dynamicStyle[\"maxWidth\"] = windowWidth / 4;\n        dynamicStyle[\"maxHeight\"] = windowHeight - 40;\n        dynamicStyle[\"top\"] = 20;\n        dynamicStyle[\"right\"] = 20;\n        dynamicStyle[\"overflowY\"] = \"scroll\";\n    }\n    return dynamicStyle;\n}\n\nfunction isNarrowScreen(windowWidth) {\n    return windowWidth <= 400;\n}\n\nfunction CommonProperties(props) {\n    return (\n        <>\n            <h6>{props.selectedNode.type.toUpperCase()}</h6>\n            <h2>{props.selectedNode.name}</h2>\n            <p>{props.selectedNode.description}</p>\n        </>\n    )\n}\n\nfunction TypeProperties(props) {\n    console.log(props.selectedNode.type);\n    if (props.selectedNode.type === \"Project\") {\n        return <ProjectPropertiesDiv selectedNode={props.selectedNode} />\n    } else if (props.selectedNode.type === \"Technology\") {\n        return <TechnologyProperties selectedNode={props.selectedNode} />\n    } else {\n        return null;\n    }\n}\n\nfunction ProjectPropertiesDiv(props) {\n    const sn = props.selectedNode;\n    const grade = (sn.grade) ? sn.grade.toString() + \"/100\" : null;\n    const altText = \"Screenshot for \" + sn.name\n    return (\n        <>\n            <OneLineProperty displayName=\"Year\" property={sn.year} />\n            <OneLineProperty displayName=\"Grade\" property={grade} />\n            <Link displayName=\"Website\" property={sn.website} />\n            <Link displayName=\"Source Code\" property={sn.code} />\n            <Image altText={altText} property={sn.image} />\n        </>\n    )\n}\n\nfunction TechnologyProperties(props) {\n    const sn = props.selectedNode;\n    return (\n        <OneLineProperty displayName=\"Skill Level\" property={skillLevelMap(sn.skillLevel)} />\n    )\n}\n\nfunction skillLevelMap(n) {\n    if (n === 0) {\n        return \"Haven't used\";\n    } else if (n === 1) {\n        return \"Some knowledge\";\n    } else if (n === 2) {\n        return \"Moderate experience\";\n    } else if (n === 3) {\n        return \"Deep understanding\"\n    } else {\n        return \"\";\n    }\n}\n\nfunction OneLineProperty(props) {\n    const displayName = props.displayName;\n    const property = props.property;\n    if (!property) {\n        return null;\n    } else {\n        return <p>{displayName + \": \" + property}</p>\n    }\n}\n\nfunction Link(props) {\n    const displayName = props.displayName;\n    const property = props.property;\n    if (!property) {\n        return null;\n    } else {\n        return (\n            <>\n                <Box>{displayName + \":\"}</Box>\n                <a href={property} target=\"_blank\" rel=\"noopener noreferrer\">{property} </a>\n                <p />\n            </>\n        )\n    }\n}\n\nfunction Image(props) {\n    const altText = props.altText;\n    const property = props.property;\n    if (!property) {\n        return null;\n    } else {\n        return (\n            <>\n                <a href={property} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <img src={property} alt={altText} width={\"100%\"} />\n                </a>\n                <p />\n            </>\n        )\n    }\n}","import React from \"react\";\nimport Header from \"./components/Header\";\nimport D3Graph from \"./components/Graph\";\nimport InfoOverlay from \"./components/InfoOverlay\";\n\nconst technologyNodes = require(\"./data/technology.json\");\nconst projectNodes = require(\"./data/project.json\");\nconst technologyTechnologyLinks = require(\"./data/technology-technology.json\");\nconst projectTechnologyLinks = require(\"./data/project-technology.json\");\nconst allNodes = technologyNodes.concat(projectNodes);\nconst allLinks = technologyTechnologyLinks.concat(projectTechnologyLinks);\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: 0,\n      windowHeight: 0,\n      data: {\n        nodes: allNodes,\n        links: allLinks\n      },\n      selectedNode: null\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.updateNodesAndLinks = this.updateNodesAndLinks.bind(this);\n    this.handleNodeClick = this.handleNodeClick.bind(this);\n    this.handleHomeButtonClick = this.handleHomeButtonClick.bind(this);\n    this.handleBackgroundClick = this.handleBackgroundClick.bind(this);\n    this.fg = React.createRef()\n  }\n\n  handleNodeClick(selectedNode) {\n    const links = allLinks.filter(link => {\n      return link.source.id === selectedNode.id || link.target.id === selectedNode.id\n    })\n    const nodes = allNodes.filter(node => {\n      return node.id === selectedNode.id || links.reduce((isIn, curr) => {\n        return isIn || node.id === curr.source.id || node.id === curr.target.id;\n      }, false);\n    })\n    this.updateNodesAndLinks(selectedNode, nodes, links);\n    this.fg.current.centerAt(selectedNode.x, selectedNode.y, 1000)\n    this.fg.current.zoom(3, 1000)\n  }\n\n  handleHomeButtonClick() {\n    this.updateNodesAndLinks(null, allNodes, allLinks);\n    this.fg.current.centerAt(0, 0, 1000)\n    this.fg.current.zoom(1, 1000)\n  }\n\n  handleBackgroundClick() {\n    this.updateNodesAndLinks(null, this.state.data.nodes, this.state.data.links)\n  }\n\n  updateNodesAndLinks(selectedNode, nodes, links) {\n    const state = this.state;\n    state.selectedNode = selectedNode;\n    state.data.nodes = nodes;\n    state.data.links = links;\n    this.setState(state);\n  }\n\n  updateWindowDimensions() {\n    const state = this.state;\n    state.windowWidth = window.innerWidth;\n    state.windowHeight = window.innerHeight;\n    this.setState(state);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  render() {\n    return (\n      <div>\n        <Header handleClick={this.handleHomeButtonClick} />\n        <InfoOverlay\n          windowWidth={this.state.windowWidth}\n          windowHeight={this.state.windowHeight}\n          selectedNode={this.state.selectedNode}\n        />\n        <D3Graph\n          fg={this.fg}\n          selectedNode={this.state.selectedNode}\n          data={this.state.data}\n          width={this.state.windowWidth}\n          height={this.state.windowHeight}\n          handleNodeClick={this.handleNodeClick}\n          handleBackgroundClick={this.handleBackgroundClick}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}